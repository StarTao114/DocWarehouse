C51 COMPILER V9.60.0.0   LORA                                                              01/12/2024 22:11:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LORA
OBJECT MODULE PLACED IN .\OBJ\lora.obj
COMPILER INVOKED BY: D:\keil\KEIL_MDK\C51\BIN\C51.EXE APP\LoRa\lora.c LARGE ROM(COMPACT) OPTIMIZE(0,SPEED) BROWSE INCDIR
                    -(.\APP\base;.\APP\LoRa;.\APP\uart;.\APP\MidWare;.\APP\numTools) DEBUG OBJECTEXTEND PRINT(.\lora.lst) OBJECT(.\OBJ\lora.o
                    -bj)

line level    source

   1          #include "lora.h"
   2          #include "stdio.h"
   3          #include "gpio.h"
   4          #include "sx1278.h"
   5          #include "delay.h"
   6          #include "synchron.h"
   7          
   8          extern u16 lastPeriod;
   9          extern u8 synReady;
  10          extern u16 currentNode;
  11          
  12          u8 nodeBrokenFlag = 0;
  13          unsigned char recv[20];
  14          u8 overTime = 0;
  15          
  16          void loraInit(void)
  17          {
  18   1              register_rf_func(&ctrlTypefunc);        //注册LoRa回调
  19   1              SX1276Reset();          //复位LoRa模块
  20   1              SX1276LORA_INT();
  21   1              
  22   1      //      SX1276WriteBuffer( REG_LR_IRQFLAGS, 0xff);                                              //清空RxBuffer
  23   1      }
  24          
  25          void loraTx(u8 *dat, u8 len)
  26          {
  27   1              SX1276WriteBuffer( REG_LR_IRQFLAGS, 0xff);                                              //清空RxBuffer
  28   1              FUN_RF_SENDPACKET(dat, len);
  29   1              Delay1s(500);
  30   1      //      SX1276WriteBuffer( REG_LR_IRQFLAGS, 0xff);
  31   1      }
  32          
  33          
  34          //void loraTxArray(u8 *arr, u8 len)
  35          //{
  36          //      while(len--)
  37          //      {
  38          //              loraTxByte(*arr);
  39          //              arr++;
  40          //      }
  41          //}
  42          
  43          
  44          #if(loraStationNum < 8)
              void loraRxData(void)
              {
                      unsigned char RF_REC_RLEN_i = 0;
                      
                      
                      RF_EX0_STATUS = SX1276ReadBuffer( REG_LR_IRQFLAGS);
                      if (RF_EX0_STATUS > 0) 
                      {
                              LED1 = 0;                       //通信开始，亮灯
C51 COMPILER V9.60.0.0   LORA                                                              01/12/2024 22:11:18 PAGE 2   

                              if ((RF_EX0_STATUS & 0x40) == 0x40) 
                              {
                                      CRC_Value = SX1276ReadBuffer( REG_LR_MODEMCONFIG2);
                                      if (CRC_Value & 0x04 == 0x04)   //若开启了CRC
                                      {
                                              SX1276WriteBuffer(REG_LR_FIFOADDRPTR, 0x00);
                                              SX1278_RLEN = SX1276ReadBuffer(REG_LR_NBRXBYTES);
                                              lpTypefunc.lpSwitchEnStatus(enOpen);
                                              lpTypefunc.lpByteWritefunc(0x00);
                                              
                                              for (RF_REC_RLEN_i = 0; RF_REC_RLEN_i < SX1278_RLEN;RF_REC_RLEN_i++) 
                                              {
                                                      recv[RF_REC_RLEN_i] = lpTypefunc.lpByteReadfunc();
                                              }
                                              lpTypefunc.lpSwitchEnStatus(enClose);
                                              recv[RF_REC_RLEN_i] = '\0';
                                              RF_RECEIVE();                   
              //                              uartSendString(recv);                           //测试使用
                                      }
                              } 
                              else if ((RF_EX0_STATUS & 0x04) == 0x04) 
                              {
                                      if ((RF_EX0_STATUS & 0x01) == 0x01) //表示CAD 检测到扩频信号 模块进入了接收状态来接收数据
                                      { 
                                              SX1276LoRaSetOpMode(Stdby_mode);
                                              SX1276WriteBuffer(REG_LR_IRQFLAGSMASK, IRQN_RXD_Value); //打开发送中断
                                              SX1276WriteBuffer(REG_LR_HOPPERIOD, PACKET_MIAX_Value);
                                              SX1276WriteBuffer( REG_LR_DIOMAPPING1, 0X02);
                                              SX1276WriteBuffer( REG_LR_DIOMAPPING2, 0x00);
                                              SX1276LoRaSetOpMode(Receiver_mode);
                                      } 
                                      else 
                                      {                          
                                              SX1276LoRaSetOpMode(Stdby_mode);
                                              SX1276WriteBuffer(REG_LR_IRQFLAGSMASK,IRQN_SEELP_Value);   //打开发送中断
                                              SX1276WriteBuffer( REG_LR_DIOMAPPING1, 0X00);
                                              SX1276WriteBuffer( REG_LR_DIOMAPPING2, 0X00);
                                              SX1276LoRaSetOpMode(Sleep_mode);
                                              //PA_SEELP_OUT();
                                      }
                              }
                              else 
                              {
                                      SX1276LoRaSetOpMode(Stdby_mode);
                                      SX1276WriteBuffer(REG_LR_IRQFLAGSMASK, IRQN_RXD_Value);  //打开发送中断
                                      SX1276WriteBuffer(REG_LR_HOPPERIOD, PACKET_MIAX_Value);
                                      SX1276WriteBuffer( REG_LR_DIOMAPPING1, 0x02);
                                      SX1276WriteBuffer( REG_LR_DIOMAPPING2, 0x00);
                                      SX1276LoRaSetOpMode(Receiver_mode);
                              }
                              RF_REC_RLEN_i = 0;
                              SX1276WriteBuffer( REG_LR_IRQFLAGS, 0xff);
                              Delay1s(300);
                      } 
                      else 
                      {
                              LED1 = 1;                               //通信结束，灭灯
                      }
              }
              
              
              //对接新节点后，判断节点工作状态
C51 COMPILER V9.60.0.0   LORA                                                              01/12/2024 22:11:18 PAGE 3   

              void loraNodeCheck(void)
              {
                      if(currentNode != (synPeriod /11*8 + loraStationNum))                   //若通信目标节点发生变化
                      {
                              if(recv[0] == nodeReadyFlag)    
                              {
                                      LED2 = 0;
                                      synReady = 1;                                                                                   //节点就绪标志位，LED2仅为测试阶段使用
                                      currentNode = synPeriod /11*8 + loraStationNum;                 //更新通信节点编号
                                      overTime = 0;                                                                                   //超时次数清空
                                      
                              }
                              else
                              {
                                      LED2 = 1;
                                      synReady = 0;
                                      overTime++;
                              }
                              
                              //若超时次数过多，或已经有两个周期没有收到就绪报文，则视为节点损坏
                              //这部分需要统一加入看门狗
              //              if(overTime > bokenThreshold || (synPeriod - lastPeriod) > 1)   
              //              {
              //                      nodeBrokenFlag = 1
              //              }
                      }
              }
              
              void loraNextPactet(void)
              {
                      u8 crcCheck = 0;
                      if(lastPeriod != synPeriod)                             //若周期发生更新
                      {
                              loraTxByte('N');
                              loraRxData();
                      }
                      
                      crcCheck = SX1276ReadBuffer(RegIrqFlags2);
                      if((crcCheck & 0x02) != 0x02)
                      {
                              loraTxByte('R');        
                              LED2 = 1;
                      }
                      
                      do
                      {
                              loraRxData();
                              crcCheck = SX1276ReadBuffer(RegIrqFlags2);
                              if((synPeriod - lastPeriod) > 1)
                              {
                                      lastPeriod = synPeriod;
                                      overTime++;
                                      return;
                              }
                      }while((crcCheck & 0x02) != 0x02);              //若CRC校验失败
                      
                      loraNodeFreqHopping();
                      lastPeriod = synPeriod;
                      LED2 = 0;
              }
              
              
C51 COMPILER V9.60.0.0   LORA                                                              01/12/2024 22:11:18 PAGE 4   

              void loraNodeFreqHopping(void)
              {
                      if(synPeriod % (packetLength + 1) == packetLength)
                      {
                              loraTxByte('J');
                      }
              }
              
              #endif
 187          
 188          
 189          #if(loraStationNum == 99)
 190          void loraCommunicateStart(void)
 191          {
 192   1              u8 arr[2] = {0xdd, '\0'};
 193   1              loraTx(arr, 1);
 194   1              Delay1s(800);
 195   1              loraTx(arr, 1);
 196   1              Delay1s(800);
 197   1      }
 198          
 199          
 200          void loraNodeSleep(void)
 201          {
 202   1              u8 arr[2] = "S";
 203   1              
 204   1              loraTx(arr, 2);
 205   1              Delay1s(50);
 206   1              loraTx(arr, 2);
 207   1              Delay1s(50);
 208   1      }
 209          
 210          //u16 loraCycle(u16 period)
 211          //{
 212          //      
 213          //}
 214          
 215          #endif
 216          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    214    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =     30    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
